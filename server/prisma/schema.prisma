// Whenever you make changes to your Prisma schema in the future, you manually need to invoke prisma generate in order to accommodate the changes in your Prisma Client API.
// prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

type ProfilephotoLinks {
  download          String
  download_location String
  html              String
  self              String
}

type ProfilephotoUrls {
  full     String
  raw      String
  regular  String
  small    String
  small_s3 String
  thumb    String
}

// type UserTraits {
//   id              String?            
//   email           String?        
//   firstName       String?
//   lastName        String?
//   phoneNumber     String?
//   userId          String?         
//   username        String?
// }

model Profilephoto {
  id                      String              @id @map("_id") @db.ObjectId
  v                       Int                 @map("__v")
  alt_description         String
  blur_hash               String
  color                   String
  height                  Int
  id_                     String              @map("id") @db.ObjectId
  links                   ProfilephotoLinks[]
  links_download          String
  links_download_location String
  links_html              String
  links_self              String
  urls                    ProfilephotoUrls[]
  urls_full               String
  urls_raw                String
  urls_regular            String
  urls_small              String
  urls_small_s3           String
  urls_thumb              String
  //users                   User?          
  users                   User[]          
  width                   Int
}

model Segmenter {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  v             Int             @map("__v")
  createdAt     DateTime        @db.Date
  firstName     String
  internalTeam  String
  jobRole       String?
  lastName      String
  userId        String?          @unique @map("id") @db.ObjectId
  myUsers       UserSegment[]   
  // myUsers       User[]          @relation(fields: [id], references:[id])
  phoneNumber   String?
  pronouns      String?
  region        String?
  segmentEmail  String          @unique
  slackName     String          @unique
  team          String
  twilioEmail   String          @unique
  updatedAt     DateTime        @db.Date
  workspaceId   String?         @unique
  workspaceSlug String          @unique
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  v               Int?          @map("__v")
  anonymousId     String[]    
  createdAt       DateTime?     @db.Date
  email           String        @unique
  firstName       String
  lastName        String
  phoneNumber     String
  userId          String?        @unique @map("id") @db.ObjectId
  // profilePhoto    Profilephoto @relation(fields: [userId], references: [id])
  profilePhoto    Profilephoto  @relation(fields: [id], references: [id])
  segmenters      UserSegment[]  
  // segmenters      Segmenter[]   @relation(fields: [id], references:[id])
  // traits          UserTraits?
  updatedAt       DateTime      @db.Date
  username        String
}

model UserSegment {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  segmenterId       String    @db.ObjectId    
  segmenter         Segmenter @relation(fields: [segmenterId], references:[id])

  userUserId        String    @db.ObjectId
  user              User      @relation(fields:[userUserId], references:[id])
}