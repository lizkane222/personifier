generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

type ProfilephotoLinks {
  download          String
  download_location String
  html              String
  self              String
}

type ProfilephotoUrls {
  full     String
  raw      String
  regular  String
  small    String
  small_s3 String
  thumb    String
}

model profilephoto {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  v                       Int                 @map("__v")
  alt_description         String
  blur_hash               String
  color                   String
  height                  Int
  id_                     String              @map("id") @db.ObjectId
  links                   ProfilephotoLinks[]
  links_download          String
  links_download_location String
  links_html              String
  links_self              String
  urls                    ProfilephotoUrls[]
  urls_full               String
  urls_raw                String
  urls_regular            String
  urls_small              String
  urls_small_s3           String
  urls_thumb              String
  users                   userphoto[]
  width                   Int
}

model segmenter {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  v             Int           @map("__v")
  createdAt     DateTime      @db.Date
  userId        String        @unique @map("id") @db.ObjectId
  firstName     String
  internalTeam  String
  jobRole       String?
  lastName      String
  myUsers       usersegment[]
  profilephoto  String?
  phoneNumber   String?
  pronouns      String?
  region        String?
  segmentEmail  String
  slackName     String
  team          String?
  twilioEmail   String
  updatedAt     DateTime?     @db.Date
  workspaceId   String?
  workspaceSlug String?
}

model user {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  v            Int?          @map("__v")
  anonymousId  Json?
  createdAt    DateTime?     @db.Date
  email        String
  firstName    String
  lastName     String
  phoneNumber  String?
  profilePhoto userphoto[]
  segmenters   usersegment[]
  traits       Json?
  updatedAt    DateTime?     @db.Date
  userId       String?       @unique @map("id") @db.ObjectId
  username     String
}

model usersegment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  segmenteruserId String    @db.ObjectId
  segmenter       segmenter @relation(fields: [segmenteruserId], references: [id])

  userUserId String @db.ObjectId
  user       user   @relation(fields: [userUserId], references: [id])
}

model userphoto {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  profilephotoId String       @db.ObjectId
  profilephoto   profilephoto @relation(fields: [profilephotoId], references: [id])

  userUserId String @db.ObjectId
  user       user   @relation(fields: [userUserId], references: [id])
}
